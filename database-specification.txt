Meager Database File Format
==========================


 * Integers are stored little endian.


Major Concepts
--------------

After the header, the entire database is organized into fixed size chunks of data, called Pages.  The first two pages are always Journal 0, and Journal 1.  All the other Pages belong to Rows.

A Row always begins at the beginning of a Page, and spans some integer multiple of Pages (at least 1).  A Row has a RowID, TableID, and some data (Value).

A Row with a Page Count of 0 marks the end of the database.

A Row with a RowID of 0 marks an empty row.  Empty rows must have a Page Count of 1.

Journal 0 and Journal 1 are used to maintain database consistency during Insert, Update, and Delete operations.



Encryption
----------
Except for the Database Header, all data is encrypted and MAC'd.  The Threefish-512 block cipher is used for Encryption.  HMAC-SHA-256 is used for Authentication.  Both use separate keys, 64-bytes each.  The keys are stored in the Database Header, encrypted using a Derived Encryption Key.  The Derived Encryption Key is derived using the Password Salt and the Database Password.  The Database Header also includes a MAC, calculated using the Derived MAC Key, so that all data in the header is authenticated and the Database Keys are Encrypt-then-MAC.

Separating the Derived Keys from the Database Keys allows the Database Password to be changed without having to re-write the entire database.

Every Page is encrypted, and followed by a MAC of that Page (Encrypt-then-MAC).  Encryption Tweak is that Page's byte location in the database file.  A MAC tweak is also used, and is again the Page's byte location in the database file.  The MAC tweak is applied by appending the tweak to the end of the data to be MAC'd.  This makes the database more robust against scenarios where an attacker may try to move Pages around.



Update Database Password
------------------------

The Database Password may be updated by creating a new Database Header Encryption Parameters (DHEP) block.  Overwrite the DHEP block that is not currently in use (the first non-valid DHEP).  Then erase the old DHEP.  This way, if the operation is halted at any moment, the database will not become corrupted.  The new password will only take effect when the operation is completed.



Columns
-------

The underlying database does not have a concept of columns.  Rows merely store a single, arbitrary length value.  A per-row Key-Value scheme is layered on top of the database using the keyvalue.h/.c module.  The application may choose to roll their own schemes.



Journals
--------

There are two journals, Journal 0 and Journal 1.  They are used during Insert, Update, and Delete operations to keep the database consistent.  Each journal references a span of pages.

When opening the database, the journals should be checked and acted upon if valid.  If Journal 1 is valid, replace the specified range of pages with empty rows.  Then invalidate Journal 0 and Journal 1 (in that order).  If, only Journal 0 is valid, replace the specified range of pages with empty rows.  Then invalid both journals.  Both journals may, of course, be invalid when opening the database.



Insert
------

Insertion is performed by finding, or creating, a span of empty rows big enough to hold the new row.  Record this span in Journal 0.  Create the new row over the old, empty rows.  Erase Journal 0.

If Insert is not finished (power-loss, etc), the next time the database is opened the incomplete row will be removed.



Update
------

Update is performed by finding, or creating, a span of empty rows big enough to hold the updated row.  Record this span in Journal 0.  Create the updated row over the empty rows.  Now use Journal 1 to target the outdated row that we are updating.  Destroy the old row (convert into 1 or more empty rows).  Erase Journal 0.  Erase Journal 1.

If Update is not finished (power-loss, etc), the next time the database is opened the update may be rolled back.  Depending on when the operation was interrupted, the Update may still complete.



Delete
------

Delete is performed by recording the row in Journal 0.  Destroy the row.  Erase Journal 0.

If Delete is not finished (power-loss, etc), the next time the database is opened the delete will be completed.



Key-Value Scheme
----------------
The built-in key-value scheme, allowing per row key-value stores, is implemented using a simple data format.  The row's value will consist of 0 or more Key-Value Chunks, one after the other.

Keys are of fixed length, 8 bytes by default.



Database Layout
---------------
	* Database Header (padded to multiple of Page)
	* Journal 1 (padded to multiple of Page)
	* Journal 2 (padded to multiple of Page)
	* Row(s)



Database Data Structures
------------------------

Database Header:
	* 8   string   "MEAGERDB"
	* 2   uint16   Version (0x0100)
	* 4   uint32   Page Size
	* 32  binary   Unique DB ID


Database Header Encryption Parameters:
	* 64  binary   Password Salt
	* 32  string   Key Derivation Function (e.g. "PBKDF2-HMAC-SHA-256")
	* 32           Key Derivation Parameters (e.g. iteration count)
	* 128 binary   Encrypted Keys
	* 32  binary   MAC of DB Header and this structure (except HASH and MAC)
	* 32  binary   HASH of DB Header and this structure (except HASH)


Journal:
	* 4   uint32   Page Start
	* 4   uint32   Page Count


Row:
	* 4   uint32   Page Count
	* 4   uint32   Row ID  (0 for empty row)
	* 1   uint8    Table ID
	* 4   uint32   Value Length
	* *            Value Data


Key-Value Chunk:
	* 8   binary   Key
	* 4   uint32   Value Length
	* *            Value Data
